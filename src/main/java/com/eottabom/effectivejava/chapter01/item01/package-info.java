/**
 * 아이템 1. 생성자 대신 정적 팩토리 메서드를 고려하라.
 * 생성자 대신 "반드시" 정적 팩토리 메서드를 쓰라는 말은 아니다.
 * 정적 팩토리 메서드가 유효할 때가 있다.
 *
 * 생성자는 이름이 고정이라서 시그니처를 바꾼다고해도 그렇게 유용하지 않다.
 *
 * 장점
 * 1) 이름을 가질 수 있다. (동일한 시그니처의 생성자를 두개 가질 수 없다.)
 * 2) 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다. (Boolean.valueOf)
 * 3) 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.
 * - 인스턴스 기반 프레임워크, 인터페이스에 정적 메서드
 * 4) 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.(EnumSet)
 * 5) 적적 팩토리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.
 *
 * 단점
 * 1) 상속을 할 수 가 없다.
 * - private 으로 생성자를 만들기 때문에 상속을 만들 수가 없다는 것이다.
 * - 물론 delegation 해서 해당 클래스를 가지고 있으면, 값을 변경할 수 있는데 단점이지만, 장점이 될 수가 있다고 생각한다.
 * 2) 프로그래머가 찾기 어렵다.
 * - 문서화와 관련된 것인데, Javadoc 을 만들수 있는데, 메서드가 많아지게 되면 Javadoc 에서 문서를 찾기가 어렵다는 것이다.
 * - 그래서 흔히들 많이 사용하는 네이밍을 사용하라는 것이다.
 */
package com.eottabom.effectivejava.chapter01.item01;
